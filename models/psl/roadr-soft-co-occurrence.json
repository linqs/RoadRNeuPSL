{
  "options": {
    "runtime.log.level": "INFO",
    "runtime.db.intids": "true",
    "runtime.learn": "true",
    "runtime.learn.method": "Energy",
    "runtime.inference.deep.batching": "true",
    "runtime.inference.output.results": "true",
    "runtime.inference.method": "GurobiInference",
    "weightlearning.inference": "GurobiInference",
    "gurobi.worklimit": 60,
    "inference.normalize": "false",
    "gradientdescent.scalestepsize": "false",
    "gradientdescent.stepsize": "1.0e-14",
    "gradientdescent.trainingcomputeperiod": "1",
    "gradientdescent.stopcomputeperiod": "1",
    "gradientdescent.numsteps": "15",
    "gradientdescent.runfulliterations": "true",
    "gradientdescent.batchgenerator": "NeuralBatchGenerator"
  },
  "learn": {
    "rules": [
      "1.0: Neural(FrameID, BoundingBoxID, Class1) & !HardCoOccurrence(Class1, Class2) & !BoundingBox(Class1) & !BoundingBox(Class2) & !BoxConfidence(Class1) & !BoxConfidence(Class2) -> !Neural(FrameID, BoundingBoxID, Class2) ^2",
      "1.0: Neural(FrameID, BoundingBoxID, Class1) & !SoftCoOccurrence(Class1, Class2) & !BoundingBox(Class1) & !BoundingBox(Class2) & !BoxConfidence(Class1) & !BoxConfidence(Class2) -> !Neural(FrameID, BoundingBoxID, Class2) ^2",

      "1.0: Neural(FrameID, BoundingBoxID, +Class) = 1 ^2 {Class: Agent(Class)}",
      "1.0: Neural(FrameID, BoundingBoxID, +Class) >= 1 ^2 {Class: Action(Class)}",
      "1.0: Neural(FrameID, BoundingBoxID, +Class) >= 1 - Neural(FrameID, BoundingBoxID, '8') - Neural(FrameID, BoundingBoxID, '9') ^2 {Class: Location(Class)}"
    ]
  },
  "infer": {
    "rules": [
      "1.0: Neural(FrameID, BoundingBoxID, Class) >= Label(FrameID, BoundingBoxID, Class)",
      "1.5: Neural(FrameID, BoundingBoxID, Class) <= Label(FrameID, BoundingBoxID, Class)",

      "Label(FrameID, BoundingBoxID, Class1) & !HardCoOccurrence(Class1, Class2) & !BoundingBox(Class1) & !BoundingBox(Class2) & !BoxConfidence(Class1) & !BoxConfidence(Class2) -> !Label(FrameID, BoundingBoxID, Class2) .",
      "Label(FrameID, BoundingBoxID, Class1) & !SoftCoOccurrence(Class1, Class2) & !BoundingBox(Class1) & !BoundingBox(Class2) & !BoxConfidence(Class1) & !BoxConfidence(Class2) -> !Label(FrameID, BoundingBoxID, Class2) .",
      "Label(FrameID, BoundingBoxID, Class1) & !UncommonCoOccurrence(Class1, Class2) & !BoundingBox(Class1) & !BoundingBox(Class2) & !BoxConfidence(Class1) & !BoxConfidence(Class2) -> !Label(FrameID, BoundingBoxID, Class2) .",

      "Label(FrameID, BoundingBoxID1, '8') & Label(FrameID, BoundingBoxID2, '8') & Label(FrameID, BoundingBoxID1, Class) -> Label(FrameID, BoundingBoxID2, Class) .",

      "Label(FrameID, BoundingBoxID, +Class) = 1 . {Class: Agent(Class)}",
      "Label(FrameID, BoundingBoxID, +Class) >= 1 . {Class: Action(Class)}",
      "Label(FrameID, BoundingBoxID, +Class) >= 1 - Label(FrameID, BoundingBoxID, '8') - Label(FrameID, BoundingBoxID, '9') . {Class: Location(Class)}"
    ]
  },
  "predicates": {
    "Neural/3": {
      "type": "DeepPredicate",
      "options": {
        "model-path": "../models/roadr_detr_neupsl.py::RoadRDETRNeuPSL",
        "entity-data-map-path": "../data/psl-data/experiment::tube-size-4/entity-data-map.txt",
        "entity-argument-indexes": "0,1",
        "task-name": "task1",
        "class-size": 46,
        "batch-size": 4,
        "max-frames": 0,
        "image-resize": 1.0,
        "alpha": 0.5,
        "learning-rate": 1.0e-6,
        "weight-decay": 1.0e-5,
        "step-size": 500,
        "gamma": 0.1
      },
      "targets": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/entity-targets.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/entity-targets.txt"
        ]
      }
    },
    "Label/3": {
      "options": {
        "Integer": "false"
      },
      "targets": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/entity-targets.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/entity-targets.txt"
        ]
      }
    },
    "HardCoOccurrence/2": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/hard-co-occurrence.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/hard-co-occurrence.txt"
        ]
      }
    },
    "SoftCoOccurrence/2": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/soft-co-occurrence.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/soft-co-occurrence.txt"
        ]
      }
    },
    "UncommonCoOccurrence/2": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/uncommon-co-occurrence.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/uncommon-co-occurrence.txt"
        ]
      }
    },
    "BoundingBox/1": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/classes-bounding-box.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/classes-bounding-box.txt"
        ]
      }
    },
    "BoxConfidence/1": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/classes-box-confidence.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/classes-box-confidence.txt"
        ]
      }
    },
    "Agent/1": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/classes-agent.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/classes-agent.txt"
        ]
      }
    },
    "Location/1": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/classes-location.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/classes-location.txt"
        ]
      }
    },
    "Action/1": {
      "observations": {
        "learn": [
          "../data/psl-data/experiment::tube-size-4/classes-action.txt"
        ],
        "infer": [
          "../data/psl-data/experiment::tube-size-4/classes-action.txt"
        ]
      }
    }
  }
}
